This code implements a Java-based Library Management System using a graphical user interface (GUI) built with Swing, along with MySQL for data storage. Here's a brief explanation of its components and functionalities:

1. Core Components
-->Database Connection and Book Manager: Initializes a DatabaseConnection object to connect with the MySQL database.
   A BookManager is then used to manage books in the library.
-->Admin Login System: Includes a basic authentication system for an admin, allowing only 
   authorized users (with credentials stored in code) to access and manage different sections.
-->Tabbed GUI: Uses JTabbedPane to create tabs for different library operations like adding books, viewing books, issuing books, and tracking activity.
   Initially, only the “Activity Tracker” tab is enabled, with other tabs activated upon admin login.


2. Functionalities
-->Add Book: Allows admin to enter details like book ID, title, author, publisher, and year. These details are then added to the library's book inventory.
-->View Books: Displays all books in the library. A "Refresh" button updates the list with the latest data from the database.
-->Issue Book: Admin can issue books to a student by entering book ID, student name, and registration number. 
   This action also refreshes the “View Books” and “View Issued Books” tables.
-->Return Book: Enables the admin to return books by entering the book ID, updating both the book inventory and issued books list.
-->Activity Tracker: Logs various student activities (self-study, reading, etc.) in the library. 
   Entries are added to an “activity_log” table in the database and displayed in a table, including timestamps.


3. Database Interactions
-->Log Activity: Adds student activities to the activity_log table, recording registration number, name, activity type, date, and time.
-->Delete Activity Logs: A “Delete” button allows an admin to remove specific activity log entries from both the GUI table and the database.


4. Future Work and Potential Enhancements
-->Enhanced User Authentication: Implement a more secure and flexible authentication system, possibly with hashed credentials stored in the database.
-->Role-Based Access Control: Expand the admin login to allow for different user roles, enabling students, librarians,
   and administrators to have specific permissions.
-->Data Validation and Error Handling: Improve input validation (for example, checking if a book already exists) and add more robust error handling.
-->Search and Filter Features: Enhance the "View Books" and "Activity Tracker" sections with search and filter options for easier navigation and usability.
-->Notification System: Add notifications for overdue books or other library updates for improved user engagement.
-->Automated Reporting: Develop a reporting feature to generate monthly or yearly library reports on activities, books issued, and returned.

5.Database Structure
-->create database library_management;
(i).CREATE TABLE Books (
    book_id INT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author VARCHAR(255) NOT NULL,
    publisher VARCHAR(255) NOT NULL,
    year INT NOT NULL,
    status ENUM('Available', 'Issued') DEFAULT 'Available'
);
(ii).CREATE TABLE IssuedBooks (
    issue_id INT PRIMARY KEY AUTO_INCREMENT,
    book_id INT,
    student_name VARCHAR(255) NOT NULL,
    registration_no VARCHAR(50) NOT NULL,
    issue_date DATE NOT NULL,
    return_date DATE,
    FOREIGN KEY (book_id) REFERENCES Books(book_id) ON DELETE CASCADE
);
(iii).CREATE TABLE ActivityLog (
    activity_id INT PRIMARY KEY AUTO_INCREMENT,
    registration_no VARCHAR(50) NOT NULL,
    name VARCHAR(255) NOT NULL,
    activity VARCHAR(50) NOT NULL,
    date DATE NOT NULL,
    time TIME NOT NULL
);
(iv).CREATE TABLE Admin (
    admin_id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL
);

